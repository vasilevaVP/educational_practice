<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Geologica:wght@100..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/rest.css">
    <link rel="stylesheet" href="./css/style.css">
    <link rel="stylesheet" href="./css/addDevelopment.css">
    <title>Загрузить новый ресурс</title>
    <link rel="icon" href="./img/iconlogo.ico">

</head>

<body>
    <%- include('partials/header', {user: user}) %>
    <main>
    <section id="formAddDevelopment">
        <h2>Поделитесь своей образовательной разработкой </h2>
        <form id="addDevelopmentForm" method="post" enctype="multipart/form-data" action="/add/development">
            <div class="form-group" id="developmentTitleGroup">
                <label for="developmentTitle">Название разработки:</label>
                <input type="text" id="developmentTitle" name="title" placeholder="Например, презентация на тему «История России» для 5 класса" required>
            </div>
         
<div class="form-group">
  <label for="developmentDescription">Описание:</label>
  <div class="toolbar">
    <button type="button" onclick="formatText('bold')"><img src="/img/bold.svg" alt="Жирный"></button>
    <button type="button" onclick="formatText('italic')"><img src="/img/italic.svg" alt="Курсив"></button>
    <button type="button" onclick="formatText('underline')"><img src="/img/underline.svg" alt="Подчеркивание"></button>
    <button type="button" onclick="insertLink()"><img src="/img/link.svg" alt="Ссылка"></button>
    <button type="button" onclick="insertList('ordered')"><img src="/img/list-numbers.svg" alt="Нумерованный список"></button>
    <button type="button" onclick="insertList('unordered')"><img src="/img/list.svg" alt="Маркированный список"></button>
    <button type="button" onclick="execCommand('undo')"><img src="/img/undo.svg" alt="Отменить"></button>
    <button type="button" onclick="execCommand('redo')"><img src="/img/redo.svg" alt="Повторить"></button>
  </div>
  <div id="developmentDescription" contenteditable="true" style="border: 1px solid #ccc; padding: 10px; min-height: 150px;"></div>
  <textarea id="descriptionHidden" name="description" style="display:none;"></textarea>
</div>
            <div class="filePreviewContainer">
            <div class="form-group">
                <label for="developmentFile">Файл разработки:</label>
                <input type="file" id="developmentFile" name="file_path" accept=".pdf,.docx,.pptx,.mp4" required>
            </div>
            <div class="previewVisual">
            <div class="form-group">
                <label for="developmentPreview">Превью:</label>
                <input type="file" id="developmentPreview" name="preview" accept=".jpg,.jpeg,.png" required onchange="previewImage(event)">
            </div>
            <div class="preview-container">
                <img id="preview-img" src="#" alt="Превью" style="display:none;">
            </div>
          </div></div>
            <div class="form-group">
                <label for="developmentCategoryId">Категория:</label>
                <select id="developmentCategoryId" name="category_id" required>
                    <% categories.forEach(category => { %>
                        <option value="<%= category.id %>"><%= category.name %></option>
                    <% }); %>
                </select>
            </div>
            <div class="form-group">
                <label>Теги:</label>
                <div id="tagCheckboxes">
                  <% tags.forEach(tag => { %>
                    <div class="checkboxTags">
                      <input type="checkbox" 
                             name="tags[]" 
                             value="<%= tag.id %>" 
                             id="tag<%= tag.id %>">
                      <label for="tag<%= tag.id %>"><%= tag.name %></label>
                    </div>
                  <% }); %>
                </div>
                
              </div>
              <p>Нажимая на кнопку, вы соглашаетесь с <u>Условиями публикации</u></p>
            <button type="submit">Загрузить</button>
        </form>
        <div id="messageContainer" style="display: none;"></div>
       
    </section>
  </main>
    <%- include('partials/footer') %>

    <script>
document.getElementById('addDevelopmentForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  const formData = new FormData(this);
  const messageContainer = document.getElementById('messageContainer');

   // Получаем текст из редактора
  const editorContent = document.getElementById('developmentDescription').innerHTML;
  
  // Если текст не содержит HTML-тегов, добавляем базовое форматирование
  if (!/<[a-z][\s\S]*>/i.test(editorContent)) {
    const formattedContent = editorContent
      .split('\n')
      .filter(line => line.trim() !== '')
      .map(line => `<p>${line}</p>`)
      .join('');
    formData.set('description', formattedContent);
  }
  
  // Показываем сообщение о том, что отправка в процессе
  messageContainer.style.display = 'block';
  messageContainer.innerHTML = '<div class="loading">Загрузка...</div>';

  try {
    const response = await fetch('/user/add/development', {
      method: 'POST',
      body: formData
    });

    if (!response.ok) {
      throw new Error(`HTTP статус: ${response.status}`);
    }

    const data = await response.json();

    if (data.success) {
      // Сообщение об успехе
      messageContainer.innerHTML = `
        <div class="success-message">
          <p>Разработка успешно добавлена!</p>
          <a href="/profile" class="btn">Перейти в профиль</a>
        </div>`;
      this.reset();
    } else {
      // Обработка ошибок, присланных с сервера
      messageContainer.innerHTML = `<div class="error-message">${data.error || 'Ошибка загрузки'}</div>`;
    }
  } catch (error) {
    // Обработка ошибок сети или исключений
    console.error('Ошибка:', error);
    messageContainer.innerHTML = `<div class="error-message">Ошибка соединения</div>`;
  }
});
  // Функции для форматирования текста
  function formatText(command) {
    document.execCommand(command, false, null);
    updateHiddenField();
  }

  function execCommand(command) {
    document.execCommand(command, false, null);
    updateHiddenField();
  }

  function insertList(type) {
    document.execCommand(type === 'ordered' ? 'insertOrderedList' : 'insertUnorderedList', false, null);
    updateHiddenField();
  }

  function insertLink() {
    const url = prompt('Введите URL ссылки:', 'http://');
    if (url) {
      document.execCommand('createLink', false, url);
      updateHiddenField();
    }
  }

  // Обновляем скрытое поле перед отправкой формы
  function updateHiddenField() {
    document.getElementById('descriptionHidden').value = document.getElementById('developmentDescription').innerHTML;
  }

  // Обновляем перед отправкой формы
  document.getElementById('addDevelopmentForm').addEventListener('submit', function() {
    updateHiddenField();
  });

        </script>
</body>
</html>